#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:nil
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Unicode Strawman
#+DATE: <2019-02-21 Thu>
#+AUTHOR: Steve Downey
#+EMAIL: sdowney@sdowney.org
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1.91 (Org mode 9.2.1)
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://sdowney.org/css/smd-zenburn.css" />
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1.91 (<a href="https://orgmode.org">Org</a> mode 9.2.1)
#+LATEX_HEADER:
#+STARTUP: showall


* A C++ 20 Range API for Unicode Text (for C++23)

A unicode codepoint is always modeled as a char32_t. Because I don't like typedefs, there is no ~codepoint_t~.

Customization point objects ~codepoint~ and ~grapheme~ whose default behavior is to treat the View that they are given as a sequence of UTF-8 and produce Views over char32_t codepoints, and Views over Views of char32_t codepoints, ~codepoint_view~ and ~grapheme_view~. Draconian error handling, producing nothing if the underlying data is not well formed. There may be _other_ transcoding objects providing replacements or callbacks for error handling.

A Concept, ~UnicodeText~, which requires that ~codepoint(T const& t)~ and ~grapheme(T const& t)~ are well formed.

Concepts ~CodepointView~ and ~GraphemeView~, which syntactically require that a type is  View of char32_t and View of View of char32_t respectively, but have the additional semantic requirement of being ranges of codepoints and grapheme clusters.

Unicode algorithms take Concepts of either UnicodeText or the Concept they require, and the second is producible from the first.

std::text will model UnicodeText.

std::text does not model Range. Access to code units is via ~text::data()~, codepoints via ~text::codepoint()~, EGCs via ~text::grapheme()~.
