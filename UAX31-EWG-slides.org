#+OPTIONS: ':nil *:t -:t ::t <:t H:nil \n:nil ^:nil arch:headline author:nil
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:nil title:t toc:nil todo:t |:t
#+title: C++ Identifiers using UAX 31
#+author: Steve Downey
#+email: sdowney@sdowney.org
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE:
#+STARTUP: showall
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+OPTIONS: reveal_width:1600 reveal_height:900
#+REVEAL_THEME: black
#+REVEAL_TRANS: fade
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://sdowney.org/css/smd-zenburn.css" />
#+REVEAL_EXTRA_CSS: http://sdowney.org/css/smd-zenburn.css
#+REVEAL_EXTRA_CSS: ./footer.css

#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_VERSION: 4


* C++ Identifier Syntax using Unicode Standard Annex 31
- That C++ identifiers match the pattern
  #+begin_quote
  (XID_Start + _ ) + XID_Continue*.
  #+end_quote
- That portable source is required to be normalized as NFC.
- That using unassigned code points be ill-formed.

** Problem this fixes : NL 029

#+begin_quote
Allowed characters include those from U+200b until U+206x; these are zero-width and control characters that lead to impossible to type names, indistinguishable names and unusable code & compile errors (such as those accidentally including RTL modifiers).
#+end_quote

** Status Quo: we allow other "weird identifier code points"
- The middle dot ¬∑ which looks like an operator.
- Many non-combining "modifiers" and accent marks, such as ¬¥ and ¬® and Íìª which don't really make sense on their own.
- "Tone marks" from various languages, including À´ (similar to a box-drawing character ‚îú which is an operator).
- The "Greek question mark" Õæ
- Symbols which are simply not linguistic, such as €û and ‡ºí.

https://gist.github.com/jtbandes/c0b0c072181dcd22c3147802025d0b59#weird-identifier-code-points

** UAX 31 - Unicode Identifier and Pattern Syntax
- Follows the same principles as originally used for C++
- Actively maintained
- Stable

** XID_Start and XID_Continue
   - Unicode database defined properties
   - Closed under normalization for all four forms
   - Once a code point has the property it is never removed
   - Roughly:
     - Start == letters
     - Continue == Start + numbers + some punctuation

* The Emoji Problem
  - The emoji-like code points that we knew about were excluded
  - We included all unassigned code points
  - Status Quo Emoji 'support' is an accident, incomplete, and broken

** Status quo is broken
*** Some Status Quo examples
| Not Valid   | Valid       |
|-------------+-------------|
| int ‚è∞ = 0; | int üïê = 0; |
| int ‚ò†Ô∏è = 0;  | int üíÄ = 0; |
| int ‚úãÔ∏è = 0; | int üëä = 0; |
| int ‚úàÔ∏è = 0;  | int üöÄ = 0; |
| int ‚òπÔ∏è = 0;  | int üòÄ = 0; |


When the character was added to Unicode controls validity

*** Status Quo: ‚ôÄ and ‚ôÇ are disallowed
Gendered variants of emoji are selected by using a zero width joiner together
with the male and female sign.

#+begin_src C++
// Valid
    bool üë∑ = true; //  Construction Worker
// Not valid
    bool üë∑‚Äç‚ôÄ = false; // Woman Construction Worker ({Construction Worker}{ZWJ}{Female Sign})

#+end_src
** Problems adding Emoji as identifiers

*** Emoji are complex
    - Not just code points
    - Need grapheme cluster analysis
    - May incur costs even for code not using emoji

*** Emoji are not "Stable" in Unicode
   From the emoji spec
   #+begin_quote
   isEmoji(‚ôü)=false for Emoji Version 5.0, but true for Version 11.0.
   #+end_quote
   It is possible that the emoji property could be removed.

*** Identifying Emoji is difficult
    The unicode standard provides a regex that will reject non-emoji, but does not guarantee a valid emoji sequence.
    #+begin_example
    \p{RI} \p{RI}
    | \p{Emoji}
        ( \p{EMod}
        | \x{FE0F} \x{20E3}?
        | [\x{E0020}-\x{E007E}]+ \x{E007F} )?
        (\x{200D} \p{Emoji}
          ( \p{EMod}
          | \x{FE0F} \x{20E3}?
          | [\x{E0020}-\x{E007E}]+ \x{E007F} )?
        )*
#+end_example

    It's not clear how much of the unicode database would be required for complete support.


    [[https://unicode.org/reports/tr51/][UNICODE EMOJI]]

*** Some surprising things are emoji
   #+begin_example
002A          ; Emoji                # E0.0   [1] (*Ô∏è)       asterisk
0030..0039    ; Emoji                # E0.0  [10] (0Ô∏è..9Ô∏è)    digit zero..digit nine
   #+end_example

   #+begin_example
   {DIGIT ONE}{VARIATION SELECTOR-16}{COMBINING ENCLOSING KEYCAP} 1Ô∏è‚É£

   {ASTERISK}{VARIATION SELECTOR-16}{COMBINING ENCLOSING KEYCAP} *Ô∏è‚É£
   #+end_example
#+begin_src C++
/// would this be valid?
int 1Ô∏è‚É£ = 1;

#+end_src
*** Fixing the emoji problem would mean being inventive

   Being inventive in an area outside our expertise is HARD

   Adopting UAX31 as a base to move forward is conservative

   UAX 31 is a known good state

* Script Issues
  Some scripts require characters to control display or require punctuation that are not in the identifier set.

** This includes English
   - Apostrophe and dash
     - ~won't~
     - ~can't~
     - ~mustn't~
     - ~mother-in-law~
   - Programmers are used to this and do not notice

** Zero Width characters are excluded by UAX 31
Status quo allows these invisible characters

#+begin_src C++
int tmp = 0;
int t‚Äç‚Äçmp = 0;
#+end_src
 * clang 10 warns

   <source>:2:6: warning: identifier contains Unicode character <U+200D> that is invisible in some environments [-Wunicode-zero-width]


int t<U+200D><U+200D>mp = 0;

** ZWJ and ZWNJ
   However zero width joiner and non joiner are used in some scripts

   | Farsi word "names"                                                                  |
   | ŸÜÿßŸÖŸáÿß€å                                                                              |
   | NOON + ALEF + MEEM + HEH + ALEF + FARSI YEH                                         |
   | [[https://www.unicode.org/reports/tr31/images/uax31-figure-2-farsi-ex1-v1-web.jpg]] |

   | Farsi word "a letter"                                                               |
   | ŸÜÿßŸÖŸá‚Äåÿß€å                                                                              |
   | NOON + ALEF + MEEM + HEH + *ZWNJ* + ALEF + FARSI YEH                                |
   | [[https://www.unicode.org/reports/tr31/images/uax31-figure-2-farsi-ex2-v1-web.jpg]] |

   Anecdotally, these issues are understood and worked around

** UAX 31 has an expensive solution
   Identifiers can be checked for what script the code points in the identifier are used, and the rules for allowed characters can be tailored. This requires a Unicode database and would require extensive analysis during lexing.

   SG 16 does not recommend this.

* Other adopters
  - Java (https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.8)
  - Python 3 https://www.python.org/dev/peps/pep-3131/
  - Erlang https://www.erlang.org/erlang-enhancement-proposals/eep-0040.html
  - Rust https://rust-lang.github.io/rfcs/2457-non-ascii-idents.html
  - JS https://tc39.es/ecma262/
