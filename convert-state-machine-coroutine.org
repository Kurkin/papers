#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:nil
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:2 p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Converting a State Machine to a C++ 20 Coroutine
#+AUTHOR: Steve Downey
#+EMAIL: sdowney2@bloomberg.net, sdowney@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: <2021-01-20 Wed>
#+STARTUP: showall
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:

C++Now Proposal
Proposal submissions due	February 14
Conference May 2, 2021 - May 7, 2021
* Abstract
  C++ 20 coroutines can naturally express in linear code components that are today written as state machines that wait on async operations. This talk walks through using the low-level machinery and customization points in C++ 20 to convert a state machine that waits at the end of steps for async service operations to complete, into a single coroutine that `co_awaits` those operations.

* IPWG :noexport:

** Will any client data be used?
   No

** Will any proprietary data be published?
   No


** Will the publication expose information about our internal operations, practices, policies or security?
   No


** Will the publication give away any critical competitive advantage?
   No


** Will the publication reveal any product functionality that hasnâ€™t yet been released?
   No


** Will the publication paint Bloomberg or its technology in a negative light?
   No


** Will the publication disparage another company and/or paint it in a negative light?
   No


** Will any code be published? Will the publication mention any code which has not been published?
   Yes. The code will be de novo for the talk, but is likely to use existing BDE components, and to describe an async callback interface like BAS presents, without actually using BAS code. The state machine with steps is implemented in IB, but the actual code will not be used at all.



** Will any proprietary data be used?
   No


** Will the publication reveal confidential or proprietary information belonging to or pertaining to our vendors, partners, licensors, etc.?
   No


** Will the publication mention (in any form) any of Bloomberg's vendors or partners, or any commercial products?
   No


** Will any software not originating at Bloomberg be used?
   No, although cppcoro may be referenced.


** Will any data not originating at Bloomberg be used?
   No
