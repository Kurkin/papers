#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:nil
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:2 p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Writing a C++ 20 Module
#+AUTHOR: Steve Downey
#+EMAIL: sdowney2@bloomberg.net, sdowney@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: <2021-01-20 Wed>
#+STARTUP: showall
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:

C++Now Proposal
Proposal submissions due	February 14
Conference May 2, 2021 - May 7, 2021
* Abstract
  This talk will walk through creating a C++ 20 module interface and the implementation of a simple data structure, a functional tree. This will cover how to control export of types and inline code, hiding an implementation, and making sure that necessary un-exported definitions are still reachable.

* IPWG :noexport:

** Will any client data be used?
   No

** Will any proprietary data be published?
   No


** Will the publication expose information about our internal operations, practices, policies or security?
   No


** Will the publication give away any critical competitive advantage?
   No


** Will the publication reveal any product functionality that hasnâ€™t yet been released?
   No


** Will the publication paint Bloomberg or its technology in a negative light?
   No


** Will the publication disparage another company and/or paint it in a negative light?
   No


** Will any code be published? Will the publication mention any code which has not been published?
   Yes. The code will be de novo for the talk, but is implemented in terms of std library components.


** Will any proprietary data be used?
   No


** Will the publication reveal confidential or proprietary information belonging to or pertaining to our vendors, partners, licensors, etc.?
   No


** Will the publication mention (in any form) any of Bloomberg's vendors or partners, or any commercial products?
   No


** Will any software not originating at Bloomberg be used?
   No


** Will any data not originating at Bloomberg be used?
   No


* Overview of C++ 20 Modules
** Not packages - Hygene
** Module Units
** Exports
** Imports
** Private Module Fragment
** Instantiation Context
** Reachability
* The component fringetree to be modulated
** Pure persistent functional tree
** Uses std::variant<>, std::shared_ptr<>, and visitors
** Exposes function objects as interface
** Is an experimental TOY
* Considerations for a module
** Not new decisions, but more control
** What to export
** What NOT to export
** Exporting code for inlining
** Organization is not exposed to customers
* Code
** Primary module interface
*** Note that modules compose
** Module implementation unit(s)
** Module partitions to decompose large modules
*** Access to names with module linkage
** Private Fragment
** The C++ Standard tries to avoid Policy
* Building modules
** Your build system will not survive contact
** Must build in DAG order
** Back to the future: `makedeps`
** Packaging modules is an open question
** CMI are fragile - plan on delivering source
