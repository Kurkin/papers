#+OPTIONS: ':nil *:t -:t ::t <:t H:nil \n:nil ^:nil arch:headline author:nil
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:nil title:nil toc:nil todo:t |:t
#+TITLE:
#+AUTHOR:
#+EMAIL:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+KEYWORDS:
#+DESCRIPTION:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE:
#+STARTUP: showeverything
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+OPTIONS: reveal_width:1600 reveal_height:900
#+REVEAL_THEME: black
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://sdowney.org/css/smd-zenburn.css" />
#+REVEAL_EXTRA_CSS: http://sdowney.org/css/smd-zenburn.css
#+REVEAL_TITLE_SLIDE_BACKGROUND: http://sdowney.org/images/cppcon21.png

#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_VERSION: 4



* An Algebraic Bestiary
* Sums, Products, Exponents, Monoids, Functors, Oh My!
*  Oh My!
#+ATTR_REVEAL: :frag (fade-in-then-out)
   * Why Should I Care?
   * Why Should _*I*_ Care
   * Abstract Nonsense in Practice
#+begin_notes
Jargon vs terms of art

#+end_notes

* Types and Structures
#+begin_notes
Roughly three levels we will be talking about
#+end_notes
** Algebraic Types
   Composition of Types

#+begin_notes
Algebraic Types
#+end_notes
** Basic Structures
   Patterns of Operations on Types

#+begin_notes
Basic Structures
#+end_notes
** Higher Order Structures
   Patterns of Composition of Operations

#+begin_notes
Higher Order Structures
#+end_notes

* Algebraic Types
#+begin_notes
Algebraic Types
#+end_notes

** Counting how many objects in a type

#+begin_notes
Counting how many objects in a type
#+end_notes
** Product Types
   - Structs
   - Pairs
   - Tuples

#+begin_notes
Product Types
#+end_notes
** Sum Types
   - Unions
   - Variants
   - Optional/Expected

#+begin_notes
Sum Types
#+end_notes
*** Void and monostate
The empty product, a tuple of no types has one member

The empty variant, a variant of no types has none

C++ void is not Void, there are expressions of type void

std::monostate ought to be std::tuple<>

** Exponential Types
   Functions from A to B are B^A

#+begin_notes
Exponential Types
#+end_notes
*** Example of Functions
    A unary function $A \rightarrow Bool$

    Let $A$ have three elements \(a_0, a_1, a_2\)

    The eight possible functions are defined by this table

    |         | $a_0$   | $a_1$   | $a_2$   |
    |---------+---------+---------+---------|
    | $f_0()$ | $true$  | $true$  | $true$  |
    | $f_1()$ | $true$  | $true$  | $false$ |
    | $f_2()$ | $true$  | $false$ | $true$  |
    | $f_3()$ | $true$  | $false$ | $false$ |
    | $f_4()$ | $false$ | $true$  | $true$  |
    | $f_5()$ | $false$ | $true$  | $false$ |
    | $f_6()$ | $false$ | $false$ | $true$  |
    | $f_7()$ | $false$ | $false$ | $false$ |

#+begin_notes
Functions
#+end_notes

** "The Same Type"
*** Isomorphism
    Same Shape

    Mapping in both directions

#+begin_notes
Isomorphism
#+end_notes
*** Normal Form is Sum of Products
    Types with the Same NF are Isomorphic

#+begin_notes
Normal Form is Sum of Products
#+end_notes
** Examples of Type Formulas
   | Type                        | Formula      |
   |-----------------------------+--------------|
   | optional<A>                 | $1 + A$      |
   | pair<A,B>                   | $A \times B$ |
   | monostate                   | $1$          |
   | bool                        | $2$          |
   | {true, false, FileNotFound} | $3$          |
   | struct {A a; B b};          | $A \times B$ |
   | (A) -> B                    | $B ^ A$      |
   | union {A a; B b};           | $A + B$      |
   | variant<A, B, C>            | $A + B + C$  |
   |                             |              |

#+begin_notes
Examples of Type Formulas
#+end_notes
** Formula Manipulation
   | Type          |               | Formula                       |
   |---------------+---------------+-------------------------------|
   | variant<A, A> | $\Rightarrow$ | $A + A \Rightarrow 2A$        |
   | pair<bool, A> | $\Rightarrow$ | $2 \times A \Rightarrow 2A$   |
   |               |               |                               |

   A tagged pair is equivalent to a variant

#+begin_notes
Formula Manipulatio
#+end_notes
** Tuple
   | Type           |               | Formula     |
   |----------------+---------------+-------------|
   | tuple<A, A, A> | $\Rightarrow$ | $A x A x A$ |
   |                |               | $A ^ 3$     |
   |                |               |             |
   | 3 -> A         | $\Rightarrow$ | $A ^ 3$     |
   |                |               |             |

   A function that takes an index and returns an A is equivalent to a 3-tuple, or Array

#+begin_notes
Tuple
#+end_notes
** Recursive Types
   A list is either null or a value followed by a list

   $L = 1 + AL$

   We can expand in L

   \begin{equation}
   L = 1 + A(1 + AL)
   \end{equation}
   \begin{equation}
   L = 1 + A + AAL
   \end{equation}
   \begin{equation}
   L = 1 + A + AA + AAAL
   \end{equation}
   \begin{equation}
   L = 1 + A + AA + AAA + AAAAL
   \end{equation}

   So a list of A is either nil or A or two A or three A and so on

#+begin_notes
Recursive Types
#+end_notes

** Calculus
   It's been recently demonstrated that the first derivative of an algebraic type is the type of its one hole context, which is the "zipper" datatype

#+begin_notes
Calculus
#+end_notes

* Types with Operation(s)
  These kinds of structures guide not only how operations should behave, but also inform what constructors should be provided for a type

[[./Algebraic_structures_-_magma_to_group.svg]]

#+begin_notes
Algebraic Types
#+end_notes

** One Type and an operation $(A, A) \Rightarrow A$ or Group Like
  Three 'interesting' properties of the operation
  - Associativity ::
    \begin{align*}
    &a + (b + c) = (a + b) + c \\
    &op(a, op(b, c)) = op(op(a, b), c) \\
    \end{align*}
  - Identity :: There exists an element of A such that $a + i =  a$
  - Inverse :: For all elements of A, there exists an element $a'$ such that $a + a' = i$

#+begin_notes
Algebraic Types
#+end_notes
**  Also sometimes

  - Commutivity (sometimes) :: $(a + b) == (b + a)$

    Abelian (after the mathematician Abel) groups have commutitity.

#+begin_notes
Algebraic Types
#+end_notes
** The Taxonomy
*** But first a disclaimer
Various reputable sources and texts disagree slightly in terminology for this and the rest of the algebraic structures. Many will include or exclude some particular requirement. The language grew out of more than a century of mathematicians trying to describe things to each other. Papers, and entire books, will start with definitions that hold for the scope of that writing.

Don't panic!

** The Taxonomy
   | Name              | Associativity | Identity | Inverse |
   |-------------------+---------------+----------+---------|
   | Magma             | No            | No       | No      |
   | Semigroup         | Yes           | No       | No      |
   | Monoid            | Yes           | Yes      | No      |
   | Group             | Yes           | Yes      | Yes     |
   | Unital Magma      | No            | Yes      | No      |
   | Quasigroup        | No            | No       | Yes     |
   | Loop              | No            | Yes      | Yes     |
   | Inverse Semigroup | Yes           | No       | Yes     |

   Abelian Group adds Commutivity to Group (or monoid, or semigroup)

   Two of these are interesting to C++ Programmers

#+begin_notes
Algebraic Types
#+end_notes
** One has a direct impact on code: Monoid
   It shows up because it means we can work by parts in any order and we have an initial element

   Folds, tree operations, scans, etc

   We don't have a standard function that can return the identity, sometimes called mzero

   We do have a default constructor

   If you are creating a type and operation to be a monoid, make the default constructor create the zero (or 1) element
*** Free operator
If you choose to have a free operator for your type in C++, the natural spelling is
#+begin_src C++
class T {
    // ...
    friend T operator+(T const& lhs, T const& rhs) { /* ... */ }
    // ...
};
#+end_src

This is the hidden friend idiom. The operation is available if a T is involved, but not for other types, making ADL lookup less unpleasant

It's fine not to provide an operator form for the monoidal operation

#+begin_notes
Algebraic Types
#+end_notes
** Groups and  Abelian Group
   Groups add an inverse operation to monoid, allowing the operation in many cases to be undone

   Abelian groups add commutivity to the operation

   For groups there are curently no great ways to signal the pattern directly in C++ other than Concepts

   Being able to replace $op(a,b)$ with $op(b,a)$ can substantially simplify and improve parallel and concurrent algorithms

#+begin_notes
Algebraic Types
#+end_notes

** One Type and two operations $(A, A) \Rightarrow A$
*** Or Ringoid
   :PROPERTIES:
   :UNNUMBERED: notoc
   :NOSLIDE: t
   :END:

These types generally look number-ish.
  - integers
  - floating point
  - bignum
  - complex
  - vectors
  - matrices

** Ring-like
Two operations $+$ and $\times$, where $\times$ distributes over $+$

    \begin{align*}
    &a \times (b + c) = (a \times b) + (a \times c) \\
    &(b + c) \times a = (b \times a) + (c \times a) \\
    \end{align*}

** Some important Ringoids
- Semiring :: Both operations are semigroups
- Ring :: The additive monoid is an abelian group
- Field :: A commutative ring with inverses for multiplication (division is closed)

*** Semiring
- $(R, +)$ is a commutative semigroup:
  - $(a + b) + c = a + (b + c)$
  - $a + b = b + a$
- $(R, \times)$ is a semigroup:
  - $(a \times b) \times c = a \times (b \times c)$
- Multiplication left and right distributes over addition:
  - $a \times (b + c) = (a \times b) + (a \times c)$
  - $(a + b) \times c = (a \times c) + (b \times c)$

*** Ring
- $(R, +)$ is a commutative monoid with identity element $0$:
  - $(a + b) + c = a + (b + c)$
  - $a + b = b + a$
  - $0 + a = a = a + 0$
  - $\forall a \exists -a \in R : (-a) + a = 0 =  a + (-a)$

- $(R, \times)$ is a monoid with identity element $1$:
  - $(a \times b) \times c = a \times (b \times c)$
  - $1 \times a = a = a \times 1$

- Multiplication left and right distributes over addition:
  - $a \times (b + c) = (a \times b) + (a \times c)$
  - $(a + b) \times c = (a \times c) + (b \times c)$

*** Field
A Ring with division

For field $F(+, \times)$

$\forall a \in F !=0, \exists a^{-1} : a \times a^{-1} = 1 = a^{-1}\times a$

* Categorical Structures
  Category theory studies morphisms, or arrows, largely ignoring the objects. It is concerned with how operations compose, and what structures allow us to reason about those compositions

  Category theory has provided many useful results, and a lot of terrible names

  These are generic types, over some underlying type. In C++ terms something like
  #+begin_src C++
  template class T<typename A>
  #+end_src

  Composed functions are what defines the structures

#+begin_notes
Algebraic Types
#+end_notes
** Function composition
   Because not everyone agrees everywhere

   The composition of two functions

   $f(g(x))$

   is written

   $f \circ g$ ,or, $circ(f, g)$

   and has the type

   $(\beta \rightarrow \gamma) \rightarrow (\alpha \rightarrow \beta) \rightarrow (\alpha \rightarrow \gamma)$

   A function $f$ from $\beta$ to $\gamma$ and a function $g$ from $\alpha$ to $\beta$ compose to a function from $\alpha$ to $\gamma$.

#+begin_notes
Function composition
#+end_notes
*** C++
    #+begin_src C++
auto circ(auto&& f, auto&& g) {
    return [=](auto&& x) { return f(g(x)); };
}
    #+end_src


#+begin_notes
Function composition : C++
#+end_notes

** Functor
   A functor allows a function to be mapped in to the type

   in such a way that it composes sensibly

   Containers are natural Functors

   Not all Functors are Containers

#+begin_notes
Functor
#+end_notes
*** Interface
    - fmap or transform ::
   \begin{equation}
    (A \rightarrow B) \rightarrow T \langle A \rangle \rightarrow T \langle B \rangle
   \end{equation}

   Apply a function of type A to B to a ~functor~ over A producing a ~functor~ of B

#+begin_notes
Functor Interface
#+end_notes
*** Laws
#+begin_src haskell
fmap id = id
fmap (g . h) = (fmap g) . (fmap h)
#+end_src

    src_C++[:exports code]{transform(functor, std::identity)}

$\Updownarrow$

    src_C++[:exports code]{std::identity(functor)}

    src_C++[:exports code]{transform(functor, circ(g, h))}

$\Updownarrow$

    src_C++[:exports code]{circ(transform(functor, g), transform(functor, h))}


#+begin_notes
Functor Laws
#+end_notes
*** C++
#+begin_src C++
std::transform(InputIt        first1,
               InputIt        last1,
               OutputIt       d_first,
               UnaryOperation unary_op);

std::ranges::transform(R&& r, O result, F op, Proj proj = {});

std::optional::transform(F&& f);
#+end_src

If your type is Container like, make it a Range or provide a Range Adaptor

If it's not a Container, name the operation `transform`

#+begin_notes
In C++ the ergonomics suggest putting the callable at the end, rather than the beginning.
Unlike Haskell, where the callable is often bound in by partial application.

#+end_notes

# ** Applicative (unusual in C++)

# Applicative functors arise most naturally out of partial application.

# Partial application is not entirely normal in C++.

# Start with a ~list~ of values, and a function that takes that value, and continue in parallel.

# *** Interface

# *** Laws

# *** C++
** Monad
Monads allow functions returning the type of the monad to be bound into an instance of the monad, or for two functions that return monads over different types to be chained together

A monadic type over the same monadic type can be 'flattened' into the underlying monad

Monads are also Functors

_*An*_ intuition is a context for a computation

#+begin_notes
Monad
#+end_notes
*** Interface
- bind or and_then ::
  \begin{equation}
  M \langle a \rangle \rightarrow (a \rightarrow M \langle b \rangle ) \rightarrow M \langle b \rangle
  \end{equation}

- fish or kleisli arrow  ::
  \begin{equation}
  (a \rightarrow M \langle b \rangle ) \rightarrow (b \rightarrow M \langle c \rangle ) \rightarrow (a \rightarrow M \langle c \rangle )
  \end{equation}

- join or flatten or mconcat ::
  \begin{equation}
  M \langle M \langle a \rangle \rangle \rightarrow  M \langle a \rangle
  \end{equation}

#+begin_notes
Monad Interface
#+end_notes
*** Applicative and Functor parts
- make or pure or return ::
  \begin{equation}
  a  \rightarrow  M \langle a \rangle
  \end{equation}

- fmap or transform ::
   \begin{equation}
    (a \rightarrow b) \rightarrow M \langle a \rangle \rightarrow M \langle b \rangle
   \end{equation}

Any one of the first three and one of the second two can define the other three

#+begin_notes
Monad Interface
#+end_notes
*** Laws

- left identity :: bind(pure(a), h) == h(a)
- right identity :: bind(m, pure) == m
- associativity :: bind(bind(m, g), h) == bind(m, bind((\x -> g(x), h))

#+begin_notes
Monad Laws
#+end_notes

*** The Interesting Power of Monad
They can change the context

Functors can't escape the shape of the context they are in

The monad returning function passed in to ~bind~ can change everything

#+begin_notes
Why Monads
#+end_notes

*** C++

#+begin_src C++
template<class A> optional {
    // ...
    template <class F> constexpr auto and_then(F&& f);
    template <class F> constexpr auto transform(F&& f);
    // ...
};
#+end_src

*** A small coro example
Where Lazy<T> is a coroutine holding a function returning T  and the arguments to be evaluated

#+begin_src C++
// Value categories and moves elided

template <typename Value>
Value evaluate(Lazy<Value> lazy) {
    return lazy.get();
}

template <typename F, typename... Args>
auto lazy(F f, Args... args) -> Lazy<std::invoke_result_t<F, Args...>> {
    co_return std::invoke(f, args...);
}

template <typename Value, typename F>
auto transform(Lazy<Value> l, F f) -> Lazy<std::invoke_result_t<F, Value>> {
    co_return f(evaluate(l));
}

template <typename Value>
auto join(Lazy<Lazy<Value>> l) -> Lazy<Value> {
    co_return evaluate(l);
}

template <typename Value, typename Func>
auto bind(Lazy<Value> l, Func f) -> decltype(f(evaluate(l))) {
    co_return f(evaluate(l));
}

#+end_src


* Any Questions?

Or Comments?

#+begin_notes
Yes, p2300 is very related. Please find me online to discuss.
#+end_notes

* Thank You!
