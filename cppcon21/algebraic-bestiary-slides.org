#+OPTIONS: ':nil *:t -:t ::t <:t H:nil \n:nil ^:nil arch:headline author:nil
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:nil title:nil toc:nil todo:t |:t
#+TITLE:
#+AUTHOR:
#+EMAIL:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+KEYWORDS:
#+DESCRIPTION:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE:
#+STARTUP: showeverything
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+OPTIONS: reveal_width:1600 reveal_height:900
#+REVEAL_THEME: black
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://sdowney.org/css/smd-zenburn.css" />
#+REVEAL_EXTRA_CSS: http://sdowney.org/css/smd-zenburn.css
#+REVEAL_TITLE_SLIDE_BACKGROUND: http://sdowney.org/images/CrashCourseTitle.png

#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_VERSION: 4



* An Algebraic Bestiary
Sums, Products, Exponents, Monoids, Functors, Oh My!

Why Should I Care?—Or—Abstract Nonsense in Practice.


* Types and Structures
** Algebraic Types
   Composition of Types
** Basic Structures
   Patterns of Operations on Types
** Categorical Structures
   Patterns of Composition of Operations

* Algebraic Types
** Counting how many objects in a type
** Product Types
   Structs
   Pairs
   Tuples
** Sum Typles
   Unions
   Variants
   Optional/Expected
** Exponential Types
   Functions from A to B are B^A
** "The Same Type"
*** Isomorphism
    Same Shape
    Mapping in both directions
*** Normal Form is Sum of Products
    Types with the Same NF are Isomorphic
** Examples of Type Formulas
   | Type                        | Formula   |
   |-----------------------------+-----------|
   | optional<A>                 | 1 + A     |
   | pair<A,B>                   | A x B     |
   | monostate                   | 1         |
   | bool                        | 2         |
   | {true, false, FileNotFound} | 3         |
   | struct {A a; B b};          | A x B     |
   | A -> B                      | B ^ A     |
   | union {A a; B b};           | A + B     |
   | variant<A, B, C>            | A + B + C |
   |                             |           |
** Formula Manipulation
   variant<A, A> ==> A + A ==> 2A
   pair<bool, A> ==> 2 x A ==> 2A

   A tagged pair is equivalent to a variant.

   tuple<A, A, A> ==> A x A x A = A ^ 3
   3 -> A ==> A ^ 3
   a function that takes an index and returns an A is equivalent to a 3-tuple, or Array
** Recursive Types
   A list is either null or a value followed by a list

   L = 1 + AL

   We can expand in L

   L = 1 + A + AL
   L = 1 + A + AA + AL
   L = 1 + A + AA + AAA + AL

   So a list of A is either null or A or two A or three A and so on.

** Calculus
   It's been recently demonstrated that the first derivative of an algebraic type is the type of its one hole context, which is the "zipper" datatype

* Types with Operation(s)
  These kinds of structures guide not only how operations should behave, but also inform what constructors should be provided for a type.

** Monoid
** (Abelian) Group
** SemiRing or Rig
** Field (number)

* Categorical Structures
  Category theory studies morphisms, or arrows, largely ignoring the objects. It's concerned with how operations compose, and what structures allow us to reason about those compositions. Category theory has provided many useful results, and a lot of terrible names.

  Like C++ Concepts, these structures have semantic requirements that can't be derived syntactically, usually known as Laws.

** Functor

*** Interface

*** Laws

*** C++
** Applicative (unusual in C++)
*** Interface

*** Laws

*** C++
** Monad
*** Interface

*** Laws

*** C++
** Arrow
*** Interface

*** Laws

*** C++
