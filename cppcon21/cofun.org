#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:nil
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:3 p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Function Suspension with Coroutines for Lazy Thunking Evaluation
#+AUTHOR: Steve Downey
#+EMAIL: sdowney2@bloomberg.net, sdowney@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: <2021-01-20 Wed>
#+STARTUP: showall
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:

C++Con Proposal

Proposal submissions due	July 19

Conference October 24-29 2021

* Abstract
This talk will outline how to create function suspensions for lazy evaluation, how to memoize using thunking suspensions, how to use suspensions for infinite data streams, and how to write functor and monad instances for lazy functions. The coroutine nature is not required to be visible to clients of the code. In this talk, I will cover the mechanics of coroutine promises and handles.

https://github.com/steve-downey/co_fun

* IPWG Publication Checklist :noexport:

** Will any client data be used?
   No

** Will any proprietary data be published?
   No


** Will the publication expose information about our internal operations, practices, policies or security?
   No


** Will the publication give away any critical competitive advantage?
   No


** Will the publication reveal any product functionality that hasnâ€™t yet been released?
   No


** Will the publication paint Bloomberg or its technology in a negative light?
   No


** Will the publication disparage another company and/or paint it in a negative light?
   No


** Will any code be published? Will the publication mention any code which has not been published?
   Yes. The code will be de novo for the talk, but is implemented in terms of std library components.


** Will any proprietary data be used?
   No


** Will the publication reveal confidential or proprietary information belonging to or pertaining to our vendors, partners, licensors, etc.?
   No


** Will the publication mention (in any form) any of Bloomberg's vendors or partners, or any commercial products?
   No


** Will any software not originating at Bloomberg be used?
   No


** Will any data not originating at Bloomberg be used?
   No

* Super brief and not totally inaccurate summary of C++20 Coroutines
**  If it co_awaits, it's a coroutine
    - ~co_await~
    - ~co_yield~
      * is a co_await
    - ~co_return~
      * is a very special co_await

** A Coroutine's body
** Terms defined
** Awaitable and Promise
**** Awaitables are easy:
**** Minimal Example
**** Promises are a little harder:
** Minimal Boring Coroutine
* Building a lazy evaluator with coroutines
** Models a pure value
** Promise and Holder
*** Manage the lifetime of the coroutine frame
*** Mediate access to the returned value
** Can be used directly
** Can be used to implement a generic lazy evaluation
   #+begin_src C++
template <typename F, typename... Args>
auto lazy(F f, Args... args) -> Lazy<std::invoke_result_t<F, Args...>> {
    co_return std::invoke(f, args...);
}
   #+end_src
* Extending lazy with memoization: Thunking
  By the time you need to think about it, it's already been thunk.
** Modeling a (const) object rather than a value
** Differences between thunk and lazy
*** Shared state
*** Not move-only
*** evaluates to value const& rather than value&&
* std::async, std::defered, shared_future, and future
** Provide similar mechanisms at greater cost
* The functor and monad instances of lazy and thunk
  - transform
  - join
  - bind
  - make_lazy/thunk
* Why suspend a function?
  The best optimization is not executing code at all
** Example: Infinite streams
*** Cons cells with thunks
*** Recursive work abandoned
*** Appending infinities
*** Avoiding revaluation, zipping streams
** Sender/Receiver [P2300]
*** Explicit lazy forms
